#!/bin/bash

# CITEgeist Documentation Update Script
# This script rebuilds the CITEgeist documentation and deploys it to GitHub Pages

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$SCRIPT_DIR"

print_status "Starting CITEgeist documentation update process..."
print_status "Project root: $PROJECT_ROOT"

# Check if we're in the right directory
if [[ ! -d "$PROJECT_ROOT/CITEgeist" ]]; then
    print_error "CITEgeist directory not found. Please run this script from the dal413 repository root."
    exit 1
fi

# Step 1: Navigate to CITEgeist docs directory and rebuild documentation
print_status "Step 1: Rebuilding CITEgeist documentation..."
cd "$PROJECT_ROOT/CITEgeist/docs"

# Check if Makefile exists
if [[ ! -f "Makefile" ]]; then
    print_error "Makefile not found in CITEgeist/docs directory"
    exit 1
fi

# Clean previous build and rebuild
print_status "Cleaning previous build..."
make clean

print_status "Building HTML documentation..."
make html

if [[ $? -eq 0 ]]; then
    print_success "Documentation build completed successfully"
else
    print_error "Documentation build failed"
    exit 1
fi

# Step 2: Copy built documentation to GitHub Pages directory
print_status "Step 2: Copying documentation to GitHub Pages directory..."
cd "$PROJECT_ROOT"

# Backup existing docs (optional)
if [[ -d "docs_backup" ]]; then
    rm -rf docs_backup
fi
cp -r docs docs_backup
print_status "Created backup of existing docs in docs_backup/"

# Copy new documentation
print_status "Copying built documentation from CITEgeist/docs/build/html/ to docs/..."
cp -r CITEgeist/docs/build/html/* docs/

# Verify that notebook files were copied
if [[ -d "docs/notebooks" ]]; then
    notebook_count=$(ls docs/notebooks/vignette_*.html 2>/dev/null | wc -l)
    print_success "Successfully copied $notebook_count vignette files to docs/notebooks/"
else
    print_warning "No notebooks directory found in copied documentation"
fi

# Step 3: Git operations
print_status "Step 3: Committing and pushing changes to GitHub..."

# Check if there are changes to commit
if git diff --quiet && git diff --cached --quiet; then
    print_warning "No changes detected in documentation"
    print_status "Documentation is already up to date"
    exit 0
fi

# Add all changes
print_status "Adding documentation changes to git..."
git add docs/

# Show what will be committed
print_status "Changes to be committed:"
git status --short docs/

# Commit with timestamp
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
COMMIT_MSG="Update CITEgeist documentation - $TIMESTAMP

- Rebuilt Sphinx documentation with latest changes
- Updated Jupyter notebook vignettes
- Refreshed API documentation and examples
- Auto-generated by update_docs.sh"

print_status "Committing changes..."
git commit -m "$COMMIT_MSG"

# Push to GitHub
print_status "Pushing changes to GitHub..."
git push origin main

if [[ $? -eq 0 ]]; then
    print_success "Successfully pushed documentation updates to GitHub"
    print_success "GitHub Pages will update within a few minutes"
    print_success "Documentation will be available at: https://leeoesterreich.github.io/dal413/"
else
    print_error "Failed to push changes to GitHub"
    exit 1
fi

# Step 4: Cleanup and summary
print_status "Step 4: Cleanup and summary..."

# Return to original directory
cd "$PROJECT_ROOT"

# Summary
echo ""
print_success "=== Documentation Update Complete ==="
print_status "✓ Rebuilt CITEgeist documentation"
print_status "✓ Copied to GitHub Pages directory"
print_status "✓ Committed and pushed to GitHub"
echo ""
print_status "Next steps:"
print_status "1. Wait 2-3 minutes for GitHub Pages to update"
print_status "2. Visit https://leeoesterreich.github.io/dal413/ to see changes"
print_status "3. Check the 'Interactive Tutorials and Vignettes' section"
echo ""

# Optional: Open the website
read -p "Open the documentation website in browser? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    if command -v xdg-open > /dev/null; then
        xdg-open "https://leeoesterreich.github.io/dal413/"
    elif command -v open > /dev/null; then
        open "https://leeoesterreich.github.io/dal413/"
    else
        print_status "Please manually visit: https://leeoesterreich.github.io/dal413/"
    fi
fi

print_success "Documentation update script completed successfully!"

